<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[基于PageObject设计模式的自动化测试实践]]></title>
    <url>%2F2018%2F03%2F26%2F%E5%9F%BA%E4%BA%8EPageObject%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%AE%9E%E8%B7%B5%2F</url>
    <content type="text"><![CDATA[这里是PageObject设计模式的官网例子。我在阅读了大量的博客后，有了一些自己的理解，并写了一个拖拽功能的实践。先上图在我的理解中，pageObject实现UI自动化测试的优点在于：1.分离业务逻辑（测试用例），页面定位与用户动作库的各层。2.让各层更加专注于丰富各层的功能。业务逻辑层，可以更多的考虑测试覆盖率，测试用例的完善程度或者考虑用户的使用场景;页面定位层，可以更多的考虑系统不同页面各元素的定位问题，如何更快更好的存储元素的位置信息;用户的动作库，可以考虑如何将webdriver中的方法封装成可复用的用户动作方法，来充实自己的公共方法库。以下是我通过参考网上相关博客后，自己写的拖拽功能的实践。基本方法的封装：test_1_basePage.py12345678910111213141516171819202122232425from selenium.webdriver.support.wait import WebDriverWaitfrom selenium.webdriver.common.action_chains import ActionChainsfrom selenium import webdriverclass BasePage(object): def __init__(self,selenium_driver,base_url): self.driver =selenium_driver self.base_url = base_url def _open(self,base_url): self.driver.maximize_window() self.driver.get(base_url) def drag_2_where(self,drag_loc,x,y): try: actions = ActionChains(self.driver) actions.move_to_element(drag_loc) actions.click_and_hold() actions.pause(2) actions.move_by_offset(x, y) actions.pause(2) actions.release() actions.pause(2) actions.perform() except AttributeError: print("拖拽动作失败") 页面对象：test_2_login.py1234567891011121314151617from selenium.webdriver.support.wait import WebDriverWaitfrom selenium import webdriverfrom selenium.webdriver.common.by import Byfrom test_1_basePage import BasePagedrag_loc1 ='/html/body/div[2]/div/div[2]/div[2]/div[2]/div/div[2]/div[3]/div/div/div[2]/div[2]'x = 166 #X轴方向拖动长度y = 0 #y轴方向拖动长度class LoginPage(BasePage): def open(self): #调用page中的_open打开连接 self._open(self.base_url) #拖拽验证： def drag_to(self): drag_loc = self.driver.find_element(By.XPATH,drag_loc1) self.drag_2_where(drag_loc,x,y) 测试用例：test_case_1_login.py123456789101112131415161718192021222324252627import unittest from test_2_login import LoginPagefrom selenium import webdriverclass Case1(unittest.TestCase): def setUp(self): options = webdriver.ChromeOptions() options.add_argument("--no-sandbox") self.driver = webdriver.Chrome(executable_path="XXpath/to/chromedriverXX", chrome_options=options) self.driver.implicitly_wait(30) self.url ="http://dun.163.com/trial/jigsaw" #用例执行体 def test_login(self): #声明LoginPage类对象 login_page = LoginPage(self.driver,self.url) #调用打开页面组件 login_page.open() #拖拽验证 #login_page.drag_to() def tearDown(self): self.driver.quit() if __name__ == "__main__": unittest.main() 以上是利用po模式的关于拖拽的小实践，实践后才也发现这个功能有一些缺点：1.页面对象层没有将测试数据（位置信息和输入参数）从py文件中分离出来; 2.有些参数例如x,y放置在页面对象这一层中并不是很好; 3.页面对象层中注重的应该是页面元素的定位，这层的还需要优化so,待我在实践中探索,优化后……再来更新……]]></content>
      <tags>
        <tag>python webdriver</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[踩坑记--修改next主页的内容]]></title>
    <url>%2F2018%2F03%2F24%2F%E4%BF%AE%E6%94%B9next%E4%B8%BB%E9%A2%98%E7%9A%84%E4%B8%BB%E9%A1%B5%E5%86%85%E5%AE%B9-%E8%B8%A9%E5%9D%91%2F</url>
    <content type="text"><![CDATA[我的个人博客是用github+hexo+next主题搭建的。搭建成功后，next主题的首页让我有点不满意，我总感觉首页应该写点啥总结之类的，可是next主题默认的会将我所有的post文章按照时间最新一一展示出来，它还不像归档那种只展示题目，它会将内容也展示出来。本宝不开心啊~~ 但是，又不想换这种优雅的主题，所以只有自己又双叒叕(yòu,shuāng,ruò,zhuó)的去找资料看文档，修改代码了。搞了几天，其实发现很简单，不过还是记录下来吧。先上图，这是我修改过的主页。显示的是我的一篇测试牢骚。具体修改步骤：1.你的next主题的布局文件夹下找到index.swig文件,如下是我的目录2.找到该文件中的这几行123456789&#123;% block content %&#125; &lt;section id="posts" class="posts-expand"&gt; &#123;% for post in page.posts %&#125; &#123;&#123; post_template.render(post, true) &#125;&#125; &#123;% endfor %&#125; &lt;/section&gt; &#123;% include '_partials/pagination.swig' %&#125;&#123;% endblock %&#125;先解释一下，这个文件就是生成主页内容的文件，具体内容就是：遍历你的每个post并显示出来。所以我们就需要修改它只显示我们指定的文章了。修改如下：1234567891011&#123;% block content %&#125; &lt;section id="posts" class="posts-expand"&gt; &#123;% for post in page.posts %&#125; &#123;% if post.title == "2018，测试路上" %&#125; &#123;&#123; post_template.render(post, true) &#125;&#125; &#123;% endif %&#125; &#123;% endfor %&#125; &lt;/section&gt; &#123;% include '_partials/pagination.swig' %&#125;&#123;% endblock %&#125;就只加上了一个if语句让它遍历我_posts文件夹内所有的post，再显示title为“2018，测试路上”的文章。这样就成功了，但是有个问题的是post下面一般都有“赏”这部分。怎么去掉/添加呢，就在这句代码中的true/false了。1post_template.render(post, true)当为true时，则不显示，false则会显示“赏”这部分。]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人博客添加Travis CI持续集成]]></title>
    <url>%2F2018%2F03%2F19%2F%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%2F</url>
    <content type="text"><![CDATA[上周看了一篇关于个人博客添加持续集成功能后有不少优点，就突然想要给自己的个人博客也添加一个持续集成的功能。持续集成的优点很多,可参考这个网址。开始瞎折腾了：1.用你的github账号登录Travis-ci（公共仓库 https://travis-ci.org/）2.向下拉，找到你的仓库文件,并允许此项目使用travis ci3.添加配置文件 .travis.yml参考文档资料，看看怎么写自己的配置文件,用以定义travis ci的执行步骤。4.登录github，并添加token。只用勾选第一个大选择框 repo，生成token后，将token复制下来备用5.安装ruby依赖环境和travis命令行工具travis命令行工具在ruby环境安装完成后，使用如下命令安装即可1gem install travis友情提示：ruby安装可直接点击链接下载for windows版本的。我安装的ruby是2.4版本，因为博友们说2.5版本的会报错。安装好后可使用如下命令检查ruby是否安装好1ruby -v6.使用travis命令行工具，登录travis，并加密你的博客仓库，并设置好刚才的复制下来的token。登录travis的用户名和密码即github的账号和密码。加密博客仓库1travis encrypt -r &lt;github name&gt;/&lt;github repo&gt; GH_Token=XXXXXXXX然后你需要将secure后面部分复制到.travis.yml文件中。也可以在运行上述命令行时添加一个–add，它就会自动的在.travis.yml中加入secure键值对，如1travis encrypt -r &lt;github name&gt;/&lt;github repo&gt; GH_Token=XXXXXXXX --add 7.登录travis ci，在给你选定的个人博客仓库添加环境变量…………未完待续…………https://docs.travis-ci.com/user/deployment/pages/]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[踩坑记--hexo中加入音乐]]></title>
    <url>%2F2018%2F01%2F23%2Fhexo%E4%B8%AD%E5%8A%A0%E5%85%A5%E9%9F%B3%E4%B9%90-%E8%B8%A9%E5%9D%91%2F</url>
    <content type="text"><![CDATA[我一直都想要做一个人博客。不久前，朋友推荐我来玩玩hexo，之后我就开始了自己的踩坑之旅……其实我用github+hexo搭建个人网站的时候挺顺利的，重在我修改next主题的默认样式以及加入小功能的时候，感觉有点费力。今天呢，我想讲讲我昨天是怎么把音乐给折腾出来的。在我想要给我的博客加入音乐的时候，就搜罗了网上的解决办法，一种是用网易云音乐生成iframe插件,直接复制对应歌曲下方的html代码,然后放在你想要播放音乐的页面一种是用hexo的音乐播放插件Aplayer，附上你的音乐外链。我是采用的第二种但是做这个音乐与图片外链，昨天折腾了我一下午。我在网上百度了很多方法，用qq邮箱，百度云，音乐分享的链接都没成功，去了七牛云注册又不想去实名认证，所以不能用。伤心三秒，想到了之前我给博客加入评论系统的时候，使用的leancloud，完美解决了图片与音乐外链问题。直接上方法了……leancloud看官网介绍，它是国内的一个BaaS(翻译:后端即服务：Backend as a Service)供应商，提供后台云服务。反正对于我的理解就是，可以让它当我的个人博客的一个后台，可以为我存储数据，做统计分析等等第一步：去leancloud官网，注册,选择个人用户，开发版的是免费的。第二步：登录你的leancloud账号，点击创建应用第三步：到你创建的应用里面去，点击存储，见下图，点击_File，点击上传，找到你下载好的音乐文件和你的音乐图片(图片大概70×70就够了)上传上去就行了。将列表向后拉，便可以看到对应音乐和图片的url链接啦在这里特别说明一下，有时候可能由于网络的原因，上传后音乐文件可能没有及时显示，如果你在列表中没看见你上传的文件，可以手动刷新试试。第四步: 在你想要加入音乐播放器的页面，可复制如下代码1&#123;% aplayer "可以了" "陈奕迅" "https://xxx.xxx.com/92b3af330d2274b1fa55.mp3" "https://xxx.xxx.com/xx.png" "autoplay" %&#125;如果你想放一个音乐list的话可以将上面代码换成1&#123;% aplayerlist %&#125;&#123;"narrow": false,"autoplay": true,"showlrc": 3,"mode": "random","music": [&#123;"title": "美好事物","author": "房东的猫","url": "http://xxx.xxx.com/945198c4909674765644.mp3","pic": "http://xxx.xxx.com/6e0e9e63cb0733f7ff12.png","lrc": ""&#125;,&#123;"title": "尚好的青春","author": "云の泣","url": "http://xxx.xxx.com/5b42b829b8ae08ccabe0.mp3","pic": "http://xxx.xxx.com/889df742eca5261f2fc5.png","lrc": ""&#125;,&#123;"title": "预谋邂逅","author": "阿肆","url": "http://xxx.xxx.com/1bd4f91441982710bcad.mp3","pic": "http://xxx.xxx.com/f72d61579f74d4ff9ce0.png","lrc": ""&#125;]&#125;&#123;% endaplayerlist %&#125;效果如下：PS：如果上面的步骤你都做好了，但是音乐不能播放，显示error happen的话，应该是你的音乐文件有问题，可以去leancloud点击一下你的音乐文件试试能否播放。]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018，测试路上]]></title>
    <url>%2F2018%2F01%2F21%2F2018%EF%BC%8C%E6%B5%8B%E8%AF%95%E8%B7%AF%E4%B8%8A%2F</url>
    <content type="text"><![CDATA[当你的工作在你心中有意义，你就有成就感。 当你的工作给你时间，不剥夺你的生活，你就有尊严。 成就感和尊严，给你快乐。 var options = {"narrow":false,"autoplay":true,"showlrc":0,"listmaxheight":"0px","preload":"metadata","mode":"order","music":[{"title":"美好事物","author":"房东的猫","url":"http://ac-gwdwprl2.clouddn.com/945198c4909674765644.mp3","pic":"http://ac-gwdwprl2.clouddn.com/6e0e9e63cb0733f7ff12.png","lrc":""},{"title":"尚好的青春","author":"云の泣","url":"http://ac-gwdwprl2.clouddn.com/5b42b829b8ae08ccabe0.mp3","pic":"http://ac-gwdwprl2.clouddn.com/889df742eca5261f2fc5.png","lrc":""},{"title":"预谋邂逅","author":"阿肆","url":"http://ac-gwdwprl2.clouddn.com/1bd4f91441982710bcad.mp3","pic":"http://ac-gwdwprl2.clouddn.com/f72d61579f74d4ff9ce0.png","lrc":""}]}; options.element = document.getElementById("aplayer0"); var ap = new APlayer(options); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); 人生该当多读书。我待在学校的日子约莫有20年，同桌渐渐变成过去的同学，再变成街上熟悉的陌生人。时间和环境改变了聊天共同话题。记得在初中老师的办公室里，班主任曾经用真彩牌的中性笔写下我信誓旦旦说下的宏伟志愿，将来当一名法官。记得高中文理分班时，家人和老师语重心长的建议我理科的就业好，择业范围广。就这样我正儿八经的从高二理科班读到了现在研二，整整八年。2018已来，19不远了，我快毕业了。在过去的一两年里，我一直以为自己会从事开发，也以开发标准去培养自己，现在却对测试行业产生了极大的兴趣。这可能是我比较爱好”检查作业”，也或许我比较爱好找茬，却没练来一张能怒怼的嘴巴吧。但是，就我去实习的两家软件测试岗位来看，测试人员质量和数量都不够，而且大多数公司还不重视测试人员的能力培养，很多从事手工测试的测试人员对所测试的产品业务熟悉，却没有编程的能力。还有一部分公司对测试人员的业务能力要求真的低，仅跑跑正常流程，对于软件呈现出的数据意义理解不做要求。更甚的是公司的部分开发人员对于测试出的缺陷不仅不改，也不和测试沟通，还质疑为什么要输入这些奇怪的数据，从而大骂测试人员是智障……我感觉有点淡淡的忧伤，毕竟以后要靠它吃饭,也还要靠它快乐并且有尊严的活着。现实让我不得不对测试开发职位职责做出思考。环境与实践经验让我觉得，测试是要求综合素质比较高的，是一门很深的学问。从我目前实习三多个月的经验以及自学的各种测试工具及应用来看：软件测试 ≈ 测试基本理论的应用能力 + 能快速理解被测对象的业务能力 + 测试工具学习的使用能力 + 与程序员有效的沟通能力测试基本理论的应用能力：测试要求最大可能的找出软件缺陷，所以一个具有软件开发常识的测试人员要对开发功能做全面的熟悉，利用测试方法，用例设计方法，针对软件的功能，在相对短的时间内最快最多的去找软件的缺陷，判断缺陷严重程度。不同业务模型的软件，测试什么，怎么测最有效。所以测试基本理论的应用能力应该成为测试人员的基本品质。测试人员的业务能力：测试人员有个很重要却少有人具备的作用，就是根据被测对象，在软件设计上提出一些能规避风险的意见与建议。要能提出有建设性的意见或建议，不熟悉软件的使用人群，软件的业务流程，软件所属行业的基本背景知识，是站不出来指点江山的。在这一点上，产品经常弥补了测试人员的业务能力不足。比如我第一家实习的公司对于新增的需求在设计方面，通常都是CTO和产品交流最多。至于后面两个，工具的使用能力与沟通能力，不用说都知道，在自动化测试盛行的趋势下，测试人员同样需要具备开发的编程能力，并需要利用各种软件去节省自己有限的时间与精力。在沟通能力上，经常有人说，测试就是一块砖，哪里需要哪里搬，这个其实说明了测试人员其实大多数都是上下游走的，需要向上级说明测试进度，测试结果，并接收上级派下的任务。发现bug了，也需要让程序员能听懂问题并能立马找问题出现的地方。所以有效沟通节约了时间成本。以上不过是我测试路上的一些感受，并发点牢骚，欢迎交流。2018.3.17]]></content>
      <tags>
        <tag>测试感悟</tag>
      </tags>
  </entry>
</search>
